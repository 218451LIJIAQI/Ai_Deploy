"""
Django Migration - Model Options and Field Updates for Moodify

This migration enhances the database schema by updating model metadata options
and improving field configurations for better data integrity and admin interface display.

Generated by Django 5.2.1 on 2025-05-26 07:12

Changes Applied:
- Updated model ordering and verbose names for better admin interface
- Added unique constraint to mood names to prevent duplicates
- Enhanced foreign key relationships with descriptive related names
- Improved user mood logging with proper relationship naming

Model Updates:
- Mood: Added ordering by name, unique constraint, verbose names
- Profile: Enhanced verbose names for admin display
- Song: Added ordering by title, improved verbose names
- UserMood: Chronological ordering, enhanced relationship names

Dependencies:
- Requires 0001_initial migration to be applied first
- Uses Django's built-in User model for authentication
"""

# Generated by Django 5.2.1 on 2025-05-26 07:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    """
    Database migration to enhance model options and field configurations.
    
    This migration improves the Moodify application's data model by:
    - Adding proper ordering and verbose names for admin interface
    - Implementing unique constraints for data integrity
    - Enhancing foreign key relationships with descriptive names
    - Optimizing user mood tracking functionality
    
    Applied Changes:
    1. Model metadata updates for better admin experience
    2. Unique constraint on mood names
    3. Enhanced foreign key relationships
    4. Improved field configurations
    """

    dependencies = [
        ('music', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Update Mood model options for better organization and display
        migrations.AlterModelOptions(
            name='mood',
            options={'ordering': ['name'], 'verbose_name': 'Mood', 'verbose_name_plural': 'Moods'},
        ),
        # Update Profile model options for admin interface clarity
        migrations.AlterModelOptions(
            name='profile',
            options={'verbose_name': 'User Profile', 'verbose_name_plural': 'User Profiles'},
        ),
        # Update Song model options with alphabetical ordering
        migrations.AlterModelOptions(
            name='song',
            options={'ordering': ['title'], 'verbose_name': 'Song', 'verbose_name_plural': 'Songs'},
        ),
        # Update UserMood model options with chronological ordering
        migrations.AlterModelOptions(
            name='usermood',
            options={'ordering': ['-timestamp'], 'verbose_name': 'User Mood Log', 'verbose_name_plural': 'User Mood Logs'},
        ),
        # Add unique constraint to mood names to prevent duplicates
        migrations.AlterField(
            model_name='mood',
            name='name',
            field=models.CharField(max_length=50, unique=True),
        ),
        # Enhance profile favorite_mood relationship with descriptive related name
        migrations.AlterField(
            model_name='profile',
            name='favorite_mood',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='favorited_by', to='music.mood'),
        ),
        # Improve UserMood mood relationship with clear related name
        migrations.AlterField(
            model_name='usermood',
            name='mood',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_logs', to='music.mood'),
        ),
        # Enhance UserMood user relationship with descriptive related name
        migrations.AlterField(
            model_name='usermood',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_logs', to=settings.AUTH_USER_MODEL),
        ),
    ]
