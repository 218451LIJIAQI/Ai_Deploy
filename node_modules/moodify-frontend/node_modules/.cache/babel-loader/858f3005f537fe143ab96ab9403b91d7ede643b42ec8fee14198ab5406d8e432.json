{"ast":null,"code":"/**\n * Spotify API Service\n * Handles authentication and music fetching from Spotify Web API\n * Note: For production, move client_secret to backend to avoid exposure\n */import axios from'axios';/* ************************************************************************* *//*                           ♫  CONFIGURATION  ♫                           *//* ************************************************************************* */// Spotify API Configuration\n// Environment variables should be set in .env file:\n// REACT_APP_SPOTIFY_CLIENT_ID and REACT_APP_SPOTIFY_CLIENT_SECRET\nconst CLIENT_ID=process.env.REACT_APP_SPOTIFY_CLIENT_ID;const CLIENT_SECRET=process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;// Token management\nlet accessToken=null;let tokenExpiresAt=0;// Timestamp in milliseconds\n// In-memory cache for search results to reduce API calls\nconst cache=new Map();/* ************************************************************************* *//*                      ♫  AUTHENTICATION & TOKEN  ♫                        *//* ************************************************************************* *//**\n * Authenticate with Spotify API using client credentials flow\n * Returns cached token if still valid, otherwise requests new token\n */const authenticateSpotify=async()=>{// Return cached token if still valid (with 1-minute buffer)\nif(accessToken&&Date.now()<tokenExpiresAt-60*1000){return accessToken;}const basicAuth=btoa(\"\".concat(CLIENT_ID,\":\").concat(CLIENT_SECRET));try{const{data}=await axios.post('https://accounts.spotify.com/api/token',new URLSearchParams({grant_type:'client_credentials'}),{headers:{Authorization:\"Basic \".concat(basicAuth),'Content-Type':'application/x-www-form-urlencoded'}});accessToken=data.access_token;tokenExpiresAt=Date.now()+data.expires_in*1000;return accessToken;}catch(err){console.error('Spotify authentication failed:',err);throw new Error('Spotify authentication failed');}};/* ************************************************************************* *//*                            ♫  BLOCK LIST  ♫                              *//* ************************************************************************* */// Keywords to filter out from search results\n// Includes genres and potentially problematic content\nconst BLOCKED_KEYWORDS=['happy birthday',// Music genres and categories\n'acoustic','afrobeat','alt-rock','alternative','ambient','anime','black-metal','bluegrass','blues','bossanova','brazil','breakbeat','british','cantopop','chicago-house','children','chill','classical','club','comedy','country','dance','dancehall','death-metal','deep-house','detroit-techno','disco','disney','drum-and-bass','dub','dubstep','edm','electro','electronic','emo','folk','forro','french','funk','garage','german','gospel','goth','grindcore','groove','grunge','guitar','happy','hard-rock','hardcore','hardstyle','heavy-metal','hip-hop','holidays','honky-tonk','house','idm','indian','indie','indie-pop','industrial','iranian','j-dance','j-idol','j-pop','j-rock','jazz','k-pop','kids','latin','latino','malay','mandopop','metal','metal-misc','metalcore','minimal-techno','movies','mpb','new-age','new-release','opera','pagode','party','philippines-opm','piano','pop','pop-film','post-dubstep','power-pop','progressive-house','psych-rock','punk','punk-rock','r-n-b','rainy-day','reggae','reggaeton','road-trip','rock','rock-n-roll','rockabilly','romance','sad','salsa','samba','sertanejo','show-tunes','singer-songwriter','ska','sleep','songwriter','soul','soundtracks','spanish','study','summer','swedish','synth-pop','tango','techno','trance','trip-hop','turkish','work-out','world-music'];/* ************************************************************************* *//*                        ♫  MAIN FETCH FUNCTION  ♫                         *//* ************************************************************************* *//**\n * Main function to fetch songs by mood/genre\n * Searches playlists and extracts tracks matching the mood\n * @param {string} mood - The mood/genre to search for\n * @param {string} market - Spotify market (default: 'US')\n * @param {number} playlistLimit - Number of playlists to search (default: 5)\n * @param {number} trackLimit - Number of tracks per playlist (default: 10)\n * @returns {Array} Array of track objects\n */export const fetchSongsByMood=async function(mood){let market=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'US';let playlistLimit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;let trackLimit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:10;const key=\"\".concat(mood,\"_\").concat(market);// Return cached results if available\nif(cache.has(key)){return cache.get(key);}await authenticateSpotify();const headers={Authorization:\"Bearer \".concat(accessToken)};try{var _searchData$playlists;// Step 1: Search for playlists matching the mood\nconst{data:searchData}=await axios.get('https://api.spotify.com/v1/search',{headers,params:{q:mood,type:'playlist',limit:playlistLimit,market}});// Safely extract playlists array\nconst playlists=Array.isArray((_searchData$playlists=searchData.playlists)===null||_searchData$playlists===void 0?void 0:_searchData$playlists.items)?searchData.playlists.items:[];const tracks=[];// Step 2: Fetch tracks from each playlist in parallel\nawait Promise.all(playlists.map(async pl=>{if(!(pl!==null&&pl!==void 0&&pl.id))return;// Skip invalid playlists\ntry{const{data:trackData}=await axios.get(\"https://api.spotify.com/v1/playlists/\".concat(pl.id,\"/tracks\"),{headers,params:{limit:trackLimit,market}});// Process each track item\n(trackData.items||[]).forEach(item=>{var _t$album$images$;const t=item.track;if(!(t!==null&&t!==void 0&&t.id))return;// Skip invalid tracks\nconst name=t.name.toLowerCase();// Filter out blocked keywords\nif(BLOCKED_KEYWORDS.some(kw=>name.includes(kw)))return;tracks.push({id:t.id,title:t.name,artist:t.artists.map(a=>a.name).join(', '),url:t.external_urls.spotify,preview_url:t.preview_url,albumImageUrl:((_t$album$images$=t.album.images[0])===null||_t$album$images$===void 0?void 0:_t$album$images$.url)||''});});}catch(innerErr){console.warn(\"Failed to fetch tracks from playlist \".concat(pl.id,\":\"),innerErr);}}));// Step 3: Remove duplicates and cache results\nconst uniqueTracks=Array.from(new Map(tracks.map(t=>[t.id,t])).values());cache.set(key,uniqueTracks);return uniqueTracks;}catch(err){console.error('Error fetching songs:',err);return[];}};","map":{"version":3,"names":["axios","CLIENT_ID","process","env","REACT_APP_SPOTIFY_CLIENT_ID","CLIENT_SECRET","REACT_APP_SPOTIFY_CLIENT_SECRET","accessToken","tokenExpiresAt","cache","Map","authenticateSpotify","Date","now","basicAuth","btoa","concat","data","post","URLSearchParams","grant_type","headers","Authorization","access_token","expires_in","err","console","error","Error","BLOCKED_KEYWORDS","fetchSongsByMood","mood","market","arguments","length","undefined","playlistLimit","trackLimit","key","has","get","_searchData$playlists","searchData","params","q","type","limit","playlists","Array","isArray","items","tracks","Promise","all","map","pl","id","trackData","forEach","item","_t$album$images$","t","track","name","toLowerCase","some","kw","includes","push","title","artist","artists","a","join","url","external_urls","spotify","preview_url","albumImageUrl","album","images","innerErr","warn","uniqueTracks","from","values","set"],"sources":["C:/Users/89846/Desktop/AI_PROJECT-main/moody-music/src/components/apiService.js"],"sourcesContent":["/**\n * Spotify API Service\n * Handles authentication and music fetching from Spotify Web API\n * Note: For production, move client_secret to backend to avoid exposure\n */\n\nimport axios from 'axios';\n\n/* ************************************************************************* */\n/*                           ♫  CONFIGURATION  ♫                           */\n/* ************************************************************************* */\n\n// Spotify API Configuration\n// Environment variables should be set in .env file:\n// REACT_APP_SPOTIFY_CLIENT_ID and REACT_APP_SPOTIFY_CLIENT_SECRET\nconst CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;\n\n// Token management\nlet accessToken = null;\nlet tokenExpiresAt = 0; // Timestamp in milliseconds\n\n// In-memory cache for search results to reduce API calls\nconst cache = new Map();\n\n/* ************************************************************************* */\n/*                      ♫  AUTHENTICATION & TOKEN  ♫                        */\n/* ************************************************************************* */\n\n/**\n * Authenticate with Spotify API using client credentials flow\n * Returns cached token if still valid, otherwise requests new token\n */\nconst authenticateSpotify = async () => {\n  // Return cached token if still valid (with 1-minute buffer)\n  if (accessToken && Date.now() < tokenExpiresAt - 60 * 1000) {\n    return accessToken;\n  }\n\n  const basicAuth = btoa(`${CLIENT_ID}:${CLIENT_SECRET}`);\n\n  try {\n    const { data } = await axios.post(\n      'https://accounts.spotify.com/api/token',\n      new URLSearchParams({ grant_type: 'client_credentials' }),\n      {\n        headers: {\n          Authorization: `Basic ${basicAuth}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    );\n\n    accessToken = data.access_token;\n    tokenExpiresAt = Date.now() + data.expires_in * 1000;\n    return accessToken;\n  } catch (err) {\n    console.error('Spotify authentication failed:', err);\n    throw new Error('Spotify authentication failed');\n  }\n};\n\n/* ************************************************************************* */\n/*                            ♫  BLOCK LIST  ♫                              */\n/* ************************************************************************* */\n\n// Keywords to filter out from search results\n// Includes genres and potentially problematic content\nconst BLOCKED_KEYWORDS = [\n  'happy birthday',\n  // Music genres and categories\n  'acoustic', 'afrobeat', 'alt-rock', 'alternative', 'ambient', 'anime',\n  'black-metal', 'bluegrass', 'blues', 'bossanova', 'brazil', 'breakbeat',\n  'british', 'cantopop', 'chicago-house', 'children', 'chill', 'classical',\n  'club', 'comedy', 'country', 'dance', 'dancehall', 'death-metal',\n  'deep-house', 'detroit-techno', 'disco', 'disney', 'drum-and-bass', 'dub',\n  'dubstep', 'edm', 'electro', 'electronic', 'emo', 'folk', 'forro', 'french',\n  'funk', 'garage', 'german', 'gospel', 'goth', 'grindcore', 'groove',\n  'grunge', 'guitar', 'happy', 'hard-rock', 'hardcore', 'hardstyle',\n  'heavy-metal', 'hip-hop', 'holidays', 'honky-tonk', 'house', 'idm',\n  'indian', 'indie', 'indie-pop', 'industrial', 'iranian', 'j-dance',\n  'j-idol', 'j-pop', 'j-rock', 'jazz', 'k-pop', 'kids', 'latin', 'latino',\n  'malay', 'mandopop', 'metal', 'metal-misc', 'metalcore', 'minimal-techno',\n  'movies', 'mpb', 'new-age', 'new-release', 'opera', 'pagode', 'party',\n  'philippines-opm', 'piano', 'pop', 'pop-film', 'post-dubstep', 'power-pop',\n  'progressive-house', 'psych-rock', 'punk', 'punk-rock', 'r-n-b', 'rainy-day',\n  'reggae', 'reggaeton', 'road-trip', 'rock', 'rock-n-roll', 'rockabilly',\n  'romance', 'sad', 'salsa', 'samba', 'sertanejo', 'show-tunes',\n  'singer-songwriter', 'ska', 'sleep', 'songwriter', 'soul', 'soundtracks',\n  'spanish', 'study', 'summer', 'swedish', 'synth-pop', 'tango', 'techno',\n  'trance', 'trip-hop', 'turkish', 'work-out', 'world-music',\n];\n\n/* ************************************************************************* */\n/*                        ♫  MAIN FETCH FUNCTION  ♫                         */\n/* ************************************************************************* */\n\n/**\n * Main function to fetch songs by mood/genre\n * Searches playlists and extracts tracks matching the mood\n * @param {string} mood - The mood/genre to search for\n * @param {string} market - Spotify market (default: 'US')\n * @param {number} playlistLimit - Number of playlists to search (default: 5)\n * @param {number} trackLimit - Number of tracks per playlist (default: 10)\n * @returns {Array} Array of track objects\n */\nexport const fetchSongsByMood = async (\n  mood,\n  market = 'US',\n  playlistLimit = 5,\n  trackLimit = 10\n) => {\n  const key = `${mood}_${market}`;\n  \n  // Return cached results if available\n  if (cache.has(key)) {\n    return cache.get(key);\n  }\n\n  await authenticateSpotify();\n  const headers = { Authorization: `Bearer ${accessToken}` };\n\n  try {\n    // Step 1: Search for playlists matching the mood\n    const { data: searchData } = await axios.get(\n      'https://api.spotify.com/v1/search',\n      {\n        headers,\n        params: { q: mood, type: 'playlist', limit: playlistLimit, market },\n      }\n    );\n\n    // Safely extract playlists array\n    const playlists = Array.isArray(searchData.playlists?.items)\n      ? searchData.playlists.items\n      : [];\n\n    const tracks = [];\n\n    // Step 2: Fetch tracks from each playlist in parallel\n    await Promise.all(\n      playlists.map(async (pl) => {\n        if (!pl?.id) return; // Skip invalid playlists\n\n        try {\n          const { data: trackData } = await axios.get(\n            `https://api.spotify.com/v1/playlists/${pl.id}/tracks`,\n            { headers, params: { limit: trackLimit, market } }\n          );\n\n          // Process each track item\n          (trackData.items || []).forEach((item) => {\n            const t = item.track;\n            if (!t?.id) return; // Skip invalid tracks\n\n            const name = t.name.toLowerCase();\n            // Filter out blocked keywords\n            if (BLOCKED_KEYWORDS.some((kw) => name.includes(kw))) return;\n\n            tracks.push({\n              id: t.id,\n              title: t.name,\n              artist: t.artists.map((a) => a.name).join(', '),\n              url: t.external_urls.spotify,\n              preview_url: t.preview_url,\n              albumImageUrl: t.album.images[0]?.url || '',\n            });\n          });\n        } catch (innerErr) {\n          console.warn(`Failed to fetch tracks from playlist ${pl.id}:`, innerErr);\n        }\n      })\n    );\n\n    // Step 3: Remove duplicates and cache results\n    const uniqueTracks = Array.from(\n      new Map(tracks.map((t) => [t.id, t])).values()\n    );\n    cache.set(key, uniqueTracks);\n    return uniqueTracks;\n  } catch (err) {\n    console.error('Error fetching songs:', err);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}