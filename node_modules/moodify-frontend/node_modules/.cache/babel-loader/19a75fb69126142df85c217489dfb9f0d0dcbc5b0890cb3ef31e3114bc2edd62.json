{"ast":null,"code":"/**\n * Authentication Service\n * Handles all authentication-related API calls and token management\n * Provides centralized authentication logic for the application\n */import axios from'axios';const API_BASE_URL='http://localhost:8000';// Create configured axios instance for authentication endpoints\nconst authAPI=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to automatically include authentication token\nauthAPI.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Token \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle authentication errors globally\nauthAPI.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Handle unauthorized access - clear tokens and redirect\nlocalStorage.removeItem('authToken');localStorage.removeItem('userData');window.location.href='/login';}return Promise.reject(error);});export const authService={/**\n   * Register new user account\n   * @param {Object} userData - User registration data (username, email, password)\n   * @returns {Promise<Object>} Registration response with user data and token\n   */register:async userData=>{try{const response=await authAPI.post('/api/auth/register/',userData);if(response.data.success){// Store authentication token and user data locally\nlocalStorage.setItem('authToken',response.data.token);localStorage.setItem('userData',JSON.stringify(response.data.user));}return response.data;}catch(error){var _error$response2;throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||{success:false,message:'Registration failed'};}},/**\n   * Authenticate user login\n   * @param {Object} credentials - Login credentials (username, password)\n   * @returns {Promise<Object>} Login response with user data and token\n   */login:async credentials=>{try{const response=await authAPI.post('/api/auth/login/',credentials);if(response.data.success){// Store authentication token and user data locally\nlocalStorage.setItem('authToken',response.data.token);localStorage.setItem('userData',JSON.stringify(response.data.user));}return response.data;}catch(error){var _error$response3;throw((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data)||{success:false,message:'Login failed'};}},/**\n   * Logout current user\n   * Clears local storage and invalidates server session\n   */logout:async()=>{try{await authAPI.post('/api/auth/logout/');}catch(error){console.error('Logout error:',error);}finally{// Always clear local storage regardless of API response\nlocalStorage.removeItem('authToken');localStorage.removeItem('userData');}},/**\n   * Verify authentication status with server\n   * @returns {Promise<Object>} Authentication status and user data\n   */checkAuth:async()=>{try{const token=localStorage.getItem('authToken');if(!token){return{success:false,authenticated:false};}const response=await authAPI.get('/api/auth/check/');return response.data;}catch(error){// Clear invalid authentication data\nlocalStorage.removeItem('authToken');localStorage.removeItem('userData');return{success:false,authenticated:false};}},/**\n   * Get current user data from local storage\n   * @returns {Object|null} User data object or null if not found\n   */getCurrentUser:()=>{const userData=localStorage.getItem('userData');return userData?JSON.parse(userData):null;},/**\n   * Check if user is currently authenticated\n   * @returns {boolean} True if user has valid token and data\n   */isAuthenticated:()=>{const token=localStorage.getItem('authToken');const userData=localStorage.getItem('userData');return!!(token&&userData);},/**\n   * Get stored authentication token\n   * @returns {string|null} Authentication token or null\n   */getToken:()=>{return localStorage.getItem('authToken');}};export default authService;","map":{"version":3,"names":["axios","API_BASE_URL","authAPI","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","register","userData","post","data","success","setItem","JSON","stringify","user","_error$response2","message","login","credentials","_error$response3","logout","console","checkAuth","authenticated","get","getCurrentUser","parse","isAuthenticated","getToken"],"sources":["C:/Users/89846/Desktop/AI_PROJECT-main/moody-music/src/components/authService.js"],"sourcesContent":["/**\n * Authentication Service\n * Handles all authentication-related API calls and token management\n * Provides centralized authentication logic for the application\n */\n\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create configured axios instance for authentication endpoints\nconst authAPI = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to automatically include authentication token\nauthAPI.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle authentication errors globally\nauthAPI.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized access - clear tokens and redirect\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  /**\n   * Register new user account\n   * @param {Object} userData - User registration data (username, email, password)\n   * @returns {Promise<Object>} Registration response with user data and token\n   */\n  register: async (userData) => {\n    try {\n      const response = await authAPI.post('/api/auth/register/', userData);\n      if (response.data.success) {\n        // Store authentication token and user data locally\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('userData', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { success: false, message: 'Registration failed' };\n    }\n  },\n\n  /**\n   * Authenticate user login\n   * @param {Object} credentials - Login credentials (username, password)\n   * @returns {Promise<Object>} Login response with user data and token\n   */\n  login: async (credentials) => {\n    try {\n      const response = await authAPI.post('/api/auth/login/', credentials);\n      if (response.data.success) {\n        // Store authentication token and user data locally\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('userData', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { success: false, message: 'Login failed' };\n    }\n  },\n\n  /**\n   * Logout current user\n   * Clears local storage and invalidates server session\n   */\n  logout: async () => {\n    try {\n      await authAPI.post('/api/auth/logout/');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear local storage regardless of API response\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n    }\n  },\n\n  /**\n   * Verify authentication status with server\n   * @returns {Promise<Object>} Authentication status and user data\n   */\n  checkAuth: async () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        return { success: false, authenticated: false };\n      }\n      \n      const response = await authAPI.get('/api/auth/check/');\n      return response.data;\n    } catch (error) {\n      // Clear invalid authentication data\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n      return { success: false, authenticated: false };\n    }\n  },\n\n  /**\n   * Get current user data from local storage\n   * @returns {Object|null} User data object or null if not found\n   */\n  getCurrentUser: () => {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  },\n\n  /**\n   * Check if user is currently authenticated\n   * @returns {boolean} True if user has valid token and data\n   */\n  isAuthenticated: () => {\n    const token = localStorage.getItem('authToken');\n    const userData = localStorage.getItem('userData');\n    return !!(token && userData);\n  },\n\n  /**\n   * Get stored authentication token\n   * @returns {string|null} Authentication token or null\n   */\n  getToken: () => {\n    return localStorage.getItem('authToken');\n  }\n};\n\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}