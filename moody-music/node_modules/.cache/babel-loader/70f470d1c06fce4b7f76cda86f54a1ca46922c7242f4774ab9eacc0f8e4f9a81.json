{"ast":null,"code":"/**\n * AuthWrapper Component\n * Handles user authentication state and provides authentication context\n * Wraps the main application with login/register forms when unauthenticated\n */import React,{useState,useEffect}from'react';import{Spinner,Container}from'react-bootstrap';import Login from'./Login';import Register from'./Register';import authService from'./authService';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AuthWrapper=_ref=>{let{children}=_ref;// Authentication state management\nconst[isAuthenticated,setIsAuthenticated]=useState(false);const[currentUser,setCurrentUser]=useState(null);const[showLogin,setShowLogin]=useState(true);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{checkAuthStatus();},[]);/**\n   * Check authentication status on component mount\n   * Validates local storage and server authentication\n   */const checkAuthStatus=async()=>{setIsLoading(true);try{// Check local authentication first for better UX\nif(authService.isAuthenticated()){const userData=authService.getCurrentUser();if(userData){setCurrentUser(userData);setIsAuthenticated(true);setIsLoading(false);return;}}// Verify authentication with server\nconst response=await authService.checkAuth();if(response.success&&response.authenticated){setCurrentUser(response.user);setIsAuthenticated(true);}else{// Clear stale authentication data\nlocalStorage.removeItem('authToken');localStorage.removeItem('userData');setIsAuthenticated(false);setCurrentUser(null);}}catch(error){console.error('Auth check error:',error);setIsAuthenticated(false);setCurrentUser(null);}finally{setIsLoading(false);}};/**\n   * Handle successful login\n   * Updates authentication state with user data\n   */const handleLoginSuccess=userData=>{setCurrentUser(userData);setIsAuthenticated(true);};/**\n   * Handle successful registration\n   * Updates authentication state with new user data\n   */const handleRegisterSuccess=userData=>{setCurrentUser(userData);setIsAuthenticated(true);};/**\n   * Handle user logout\n   * Clears authentication state and calls logout service\n   */const handleLogout=async()=>{try{await authService.logout();}catch(error){console.error('Logout error:',error);}finally{setIsAuthenticated(false);setCurrentUser(null);}};/**\n   * Switch from login to register form\n   */const switchToRegister=()=>{setShowLogin(false);};/**\n   * Switch from register to login form\n   */const switchToLogin=()=>{setShowLogin(true);};// Show loading spinner during authentication check\nif(isLoading){return/*#__PURE__*/_jsx(Container,{fluid:true,className:\"d-flex align-items-center justify-content-center min-vh-100\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(Spinner,{animation:\"border\",variant:\"primary\",className:\"mb-3\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"})]})});}// Show authentication forms for unauthenticated users\nif(!isAuthenticated){return/*#__PURE__*/_jsx(_Fragment,{children:showLogin?/*#__PURE__*/_jsx(Login,{onLoginSuccess:handleLoginSuccess,onSwitchToRegister:switchToRegister}):/*#__PURE__*/_jsx(Register,{onRegisterSuccess:handleRegisterSuccess,onSwitchToLogin:switchToLogin})});}// Render main application with user context for authenticated users\nreturn/*#__PURE__*/React.cloneElement(children,{currentUser,onLogout:handleLogout});};export default AuthWrapper;","map":{"version":3,"names":["React","useState","useEffect","Spinner","Container","Login","Register","authService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AuthWrapper","_ref","children","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","showLogin","setShowLogin","isLoading","setIsLoading","checkAuthStatus","userData","getCurrentUser","response","checkAuth","success","authenticated","user","localStorage","removeItem","error","console","handleLoginSuccess","handleRegisterSuccess","handleLogout","logout","switchToRegister","switchToLogin","fluid","className","animation","variant","onLoginSuccess","onSwitchToRegister","onRegisterSuccess","onSwitchToLogin","cloneElement","onLogout"],"sources":["C:/Users/89846/Desktop/Ai_Deploy-main/moody-music/src/components/AuthWrapper.js"],"sourcesContent":["/**\n * AuthWrapper Component\n * Handles user authentication state and provides authentication context\n * Wraps the main application with login/register forms when unauthenticated\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Spinner, Container } from 'react-bootstrap';\nimport Login from './Login';\nimport Register from './Register';\nimport authService from './authService';\n\nconst AuthWrapper = ({ children }) => {\n  // Authentication state management\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [showLogin, setShowLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  /**\n   * Check authentication status on component mount\n   * Validates local storage and server authentication\n   */\n  const checkAuthStatus = async () => {\n    setIsLoading(true);\n    try {\n      // Check local authentication first for better UX\n      if (authService.isAuthenticated()) {\n        const userData = authService.getCurrentUser();\n        if (userData) {\n          setCurrentUser(userData);\n          setIsAuthenticated(true);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      // Verify authentication with server\n      const response = await authService.checkAuth();\n      if (response.success && response.authenticated) {\n        setCurrentUser(response.user);\n        setIsAuthenticated(true);\n      } else {\n        // Clear stale authentication data\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userData');\n        setIsAuthenticated(false);\n        setCurrentUser(null);\n      }\n    } catch (error) {\n      console.error('Auth check error:', error);\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Handle successful login\n   * Updates authentication state with user data\n   */\n  const handleLoginSuccess = (userData) => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  /**\n   * Handle successful registration\n   * Updates authentication state with new user data\n   */\n  const handleRegisterSuccess = (userData) => {\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  /**\n   * Handle user logout\n   * Clears authentication state and calls logout service\n   */\n  const handleLogout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    }\n  };\n\n  /**\n   * Switch from login to register form\n   */\n  const switchToRegister = () => {\n    setShowLogin(false);\n  };\n\n  /**\n   * Switch from register to login form\n   */\n  const switchToLogin = () => {\n    setShowLogin(true);\n  };\n\n  // Show loading spinner during authentication check\n  if (isLoading) {\n    return (\n      <Container fluid className=\"d-flex align-items-center justify-content-center min-vh-100\">\n        <div className=\"text-center\">\n          <Spinner animation=\"border\" variant=\"primary\" className=\"mb-3\" />\n          <p>Loading...</p>\n        </div>\n      </Container>\n    );\n  }\n\n  // Show authentication forms for unauthenticated users\n  if (!isAuthenticated) {\n    return (\n      <>\n        {showLogin ? (\n          <Login\n            onLoginSuccess={handleLoginSuccess}\n            onSwitchToRegister={switchToRegister}\n          />\n        ) : (\n          <Register\n            onRegisterSuccess={handleRegisterSuccess}\n            onSwitchToLogin={switchToLogin}\n          />\n        )}\n      </>\n    );\n  }\n\n  // Render main application with user context for authenticated users\n  return React.cloneElement(children, {\n    currentUser,\n    onLogout: handleLogout\n  });\n};\n\nexport default AuthWrapper; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}